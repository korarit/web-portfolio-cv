// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model otp {
  id         Int      @id @default(autoincrement())
  
  otp        String
  otp_code   String
  used Boolean @default(false)

  expired_at DateTime
  created_at DateTime @default(now())
  
  sessions   session[]
}

model session {
  id         Int      @id @default(autoincrement())

  otp        otp      @relation(fields: [otp_id], references: [id])    
  otp_id     Int

  token      String
  login_ip   String
  created_at DateTime @default(now())
}

model certificate {
  id       Int     @id @default(autoincrement())
  name     String
  img_path String
  link     String?
}

model contact_me {
  id           Int     @id @default(autoincrement())
  name         String?
  icon         String
  link         String
  social       Boolean @default(false)
  show_project Boolean @default(false)
}

model about_me {
  id          Int    @id @default(autoincrement())
  name        String
  description String @db.Text
}

model blog_topic {
  id    Int    @id @default(autoincrement())
  name  String
  blogs blog[]
}

model blog {
  id Int @id @default(autoincrement())
  sort_id      Int    @default(0)

  name       String
  link       String?
  img_banner String?
  view_count Int?

  blog_topics blog_topic[]

  updated_at DateTime? @default(now())
  created_at DateTime  @default(now())
}

model skill_topic {
  id     Int     @id @default(autoincrement())
  sort_id      Int    @default(0)
  
  name   String
  skills skill[]
}

model skill {
  id          Int         @id @default(autoincrement())
  sort_id      Int    @default(0)

  skill_topic skill_topic @relation(fields: [topic_id], references: [id])
  topic_id    Int
  name        String
  img_path    String?
}

model project_topic {
  id       Int       @id @default(autoincrement())
  sort_id      Int    @default(0)
  name     String
  projects project[]
}

model project {
  id           Int     @id @default(autoincrement())
  sort_id      Int    @default(0)
  
  name         String
  description  String @db.Text
  
  github_link  String?
  preview_link String?
  youtube_link String?

  img_banner   String

  project_features project_feature[]
  project_stacks   project_stack[]
  project_imgs     project_img[]
  project_topics   project_topic[]

  updated_at DateTime? @default(now())
  created_at DateTime @default(now())
}

model project_feature {
  id Int @id @default(autoincrement())

  project    project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int

  name    String
  success Boolean @default(true)
}

model project_stack {
  id Int @id @default(autoincrement())

  project    project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int

  name     String
  img_path String?
}

model project_img {
  id Int @id @default(autoincrement())

  project    project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int

  img_path String
}